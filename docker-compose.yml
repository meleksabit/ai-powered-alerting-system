services:
  # Prometheus service
  prometheus:
    build:
      context: ./prometheus-grafana
      dockerfile: Dockerfile.prometheus
    image: ${DOCKER_USERNAME}/prometheus:${TAG}
    ports:
      - "9090:9090"
    user: "65534"
    restart: unless-stopped
    networks:
      - monitor-net

  # Grafana service
  grafana:
    build:
      context: ./prometheus-grafana
      dockerfile: Dockerfile.grafana
      args:
        TAG: ${TAG}
    image: ${DOCKER_USERNAME}/grafana:${TAG}
    ports:
      - "3000:3000"
    volumes:
      - ./prometheus-grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana_data:/var/lib/grafana
    environment:
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
    restart: unless-stopped
    depends_on:
      - renderer
    networks:
      - monitor-net

  # Grafana Image Renderer service
  renderer:
    image: grafana/grafana-image-renderer:latest
    ports:
      - "8081:8081"
    restart: unless-stopped
    networks:
      - monitor-net

  # Python Flask app service
  python-app:
    environment:
      - PYTHONPATH=/app
    build:
      context: .
      dockerfile: ./my_app/Dockerfile.app
      args:
        TAG: ${TAG}
    image: ${DOCKER_USERNAME}/ai-powered-alerting-system:${TAG}
    ports:
      - "5000:5000"  # Expose Flask app on port 5000
      - "8000:8000"  # Expose Prometheus metrics on port 8000
    volumes:
      - ./my_app:/app/my_app  # Mount app source code
    restart: unless-stopped
    depends_on:
      - prometheus
      - grafana
    networks:
      - monitor-net

# Define a shared network
networks:
  monitor-net:
    driver: bridge

# Define a volume for Prometheus & Grafana data storage
volumes:
  prometheus_data:
  grafana_data:
