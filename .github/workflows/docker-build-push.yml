name: Docker Build and Push to DockerHub

on:
  workflow_run:
    workflows: ["SonarCloud Analysis"]
    types:
      - completed
    branches:
      - main
      - stage
      - test
      - development
  pull_request:
    branches:
      - '**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # ✅ Step 1: Check out the Code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Step 2: Set up Docker Buildx for better caching and multi-arch support
      - name: Download Version Tag from CI Workflow
        uses: actions/download-artifact@v4.1.8
        with:
          name: version-test  # Pulls the triggering workflow's run ID
          path: .       # Download the version.txt file to the root of the repository

      # ✅ Step 3: List all available artifacts
      - name: Debug - List All Artifacts from Previous Run
        run: gh run view --log --json artifacts --jq '.artifacts'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ✅ Step 4: Load Version Tag from Artifact
      - name: Load Version Tag
        run: |
          IMAGE_TAG=$(cat version.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # ✅ Step 5: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0

      # ✅ Step 6: Log in to DockerHub
      - name: Log in to DockerHub using secrets
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      # ✅ Step 7: Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6.10.0
        with:
          context: ./my_app
          file: ./my_app/Dockerfile.app
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ai-powered-alerting-system:latest
            ${{ secrets.DOCKER_USERNAME }}/ai-powered-alerting-system:${{ env.IMAGE_TAG }}

      # ✅ Step 8: Confirm Image Pushed
      - name: Confirm Image Push
        run: |
          echo "Docker image pushed with tag: ${{ env.IMAGE_TAG }}"
