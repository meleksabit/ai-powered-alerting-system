name: Docker Build and Push to DockerHub

on:
  workflow_run:
    workflows: ["SonarCloud Analysis"]
    types:
      - completed

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.head_branch == 'main' }}  # Run only for the main branch

    steps:
      # ✅ Step 1: Check out the Code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      # ✅ Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      # ✅ Step 4: Generate Timestamp Tag
      - name: Generate Timestamp Tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "Using TIMESTAMP: $TIMESTAMP"
          echo $TIMESTAMP > tag.txt

      # ✅ Step 5: Build and Push Python App
      - name: Build and Push Python App
        run: |
          TAG=$(cat tag.txt)
          docker buildx build \
            --build-arg TAG=$TAG \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push \
            --file ./my_app/Dockerfile.app \
            --tag ${{ secrets.DOCKER_USERNAME }}/ai-powered-alerting-system:$TAG \
            .
        env:
          TAG: ${{ env.TAG }}

      # ✅ Step 6: Build and Push Prometheus
      - name: Build and Push Prometheus
        run: |
          TAG=$(cat tag.txt)
          docker buildx build \
            --build-arg TAG=$TAG \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push \
            --file ./prometheus-grafana/Dockerfile.prometheus \
            --tag ${{ secrets.DOCKER_USERNAME }}/prometheus:$TAG \
            ./prometheus-grafana
        env:
          TAG: ${{ env.TAG }}
          
      # ✅ Step 7: Build and Push Grafana
      - name: Build and Push Grafana
        run: |
          TAG=$(cat tag.txt)
          docker buildx build \
            --build-arg TAG=$TAG \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push \
            --file ./prometheus-grafana/Dockerfile.grafana \
            --tag ${{ secrets.DOCKER_USERNAME }}/grafana:$TAG \
            ./prometheus-grafana
        env:
          TAG: ${{ env.TAG }}     

      # ✅ Step 6: Upload TAG Artifact
      - name: Upload TAG Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: tag
          path: tag.txt
