name: SonarCloud Analysis

on:
  push:
    branches:
      - main
      - stage
      - test
      - development
  pull_request:
    branches:
      - '**'

jobs:
  sonar-scan:
    runs-on: ubuntu-latest

    steps:
      # ✅ Step 1: Check out the code
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # ✅ Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      # ✅ Step 3: Set PYTHONPATH for testing and coverage
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      # ✅ Step 4: Install dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov bump2version

      # ✅ Step 5: Configure Git with GitHub Actions bot identity
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # ✅ Step 6: Bump Version and Push Changes in One Step
      - name: Bump Version and Push Changes (Auto-Increment)
        run: |
          bump2version patch --verbose || echo "Version already bumped, skipping."
          ls -l .bumpversion.cfg || echo ".bumpversion.cfg NOT FOUND!"
          grep 'current_version' .bumpversion.cfg
          git push --follow-tags || echo "Tag already exists, skipping push."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ✅ Step 6: Run Unit Tests with Coverage
      - name: Run tests with coverage
        env:
          FLASK_ENV: testing
        run: |
          pytest --cov=my_app --cov=my_app/start_app --cov-report=xml --durations=3

      # ✅ Step 7: SonarCloud Scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v6.0.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # ✅ Step 8: Save Version for Docker Workflow
      - name: Save Version for Docker Workflow
        run: |
          IMAGE_TAG=$(grep -oP '(?<=current_version = )\d+\.\d+\.\d+' .bumpversion.cfg)
          echo $IMAGE_TAG > version.txt
        id: set_version_tag

      # ✅ Step 9: Ensure the version file exists before uploading
      - name: Verify Version File Exists Before Upload
        run: |
          if [ -f "version.txt" ]; then
            echo "Version file found!"
          else
            echo "Version file NOT found!" && exit 1
          fi

      # ✅ Step 10: Upload Version Artifact
      - name: Upload Version File with Run ID
        uses: actions/upload-artifact@v4.6.2
        with:
          name: version
          path: version.txt
          if-no-files-found: error  # Fail if the file is not found
          compression-level: 6
          overwrite: true           # Do not overwrite existing files
          include-hidden-files: true  # Ensure hidden files are included
          retention-days: 90  # Extend retention period if necessary

      # ✅ Step 11: Kubernetes Lint Check
      - name: Run kube-linter
        uses: stackrox/kube-linter-action@v1.0.7
        with:
          directory: ./k8s

      # ✅ Step 12: Archive Test Results
      - name: Archive test results
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-results
          path: coverage.xml          
